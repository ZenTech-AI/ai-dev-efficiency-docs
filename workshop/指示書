[この勉強会の目的]
AI開発勉強会を開始するにあたって、勉強会の際に画面投影するドキュメントを記載するのを手伝ってください。
- このAI開発勉強会の目的：CursorやClaudeCode等の盛り上がりがあり、それらが有用なものだと確認されている
  - 個人間で活用の差こそあれど、基本的には使わない理由はないと思っている。（実際に適用できる箇所は吟味する必要はあるが）
- この勉強会では全社的にAIを活用して、適切かつ効率的に開発を進めていくことを目的としていく

[今回の目的とテーマ]
今回話すこと：
- AIドリブンで開発を行うにあたって、心構えや準備的な部分の共有
- 具体的なClaudeCode+Cursor+Jiraを使った開発手法の展開
- 心構え+モチベ7割｜実例・tips3割で今回はやっていきたいと思っています。

今回はなさないこと：
- 細かいプロンプト
- ルールの設定方法等のツールの使い方

# メインコンテンツ

## ClaudeCodeとCursorの棲み分け
[お金的な問題]
- そもそも金銭的な問題で、ある程度使うとCursorだとAutoモデルになってしまう
[機能的な問題]
- ペアプロ・細かい修正・改善・指示文を作成する時間よりも、開発した方が早そうな時：Cursor
- より広範にコンテキストを与えて、トークンを惜しみなく問題解決してほしい：ClaudeCode

秋野個人としては
- Anthropicがモデルを保持しているので、他のサービスよりも優位であると考えている。
- 広範なコンテキストを与えて、tokenをがっつり使って開発できるところが強みに感じる
- RAGよりもripgrepを初めとした高速検索機能を内蔵していて、Claude側はこれの方が精度が高いと認識しているらしい（https://x.com/pashmerepat/status/1926717705660375463）
- 最終的には好みになると思うが他ツールも含めて深く触ってみて、個人のAIスキルを高めて、効率を最大化するのが求められる。
とかが感じているメリット&所感

[棲み分け]
- 個人的には、開発をClaudeCode・コードの確認、説明をしてもらうor細かい開発にCursorという形で使用している
- 今後はClaudeCode「的」なツールが席巻していきそうな気もしているので、そちら側に慣れていきたい。

https://www.youtube.com/watch?v=c2IHEeBbY5s
【t-wadaさんに聞く】なぜCursorよりClaude Codeが優れているのか

## AIドリブン開発の心構え
[開発効率化はただ導入すれば良いわけではない]

>私たちは、AIコーディングツールが経験豊富なオープンソース開発者の作業をどれだけスピードアップするかを調べるために、ランダム化比較試験を実施しました。結果は驚くべきものでした：開発者はAIツールを使用することで20％速くなると考えていましたが、実際にはAIツールを利用した場合、利用しなかった場合に比べて19％遅くなっていました。

引用元：
https://x.com/METR_Evals/status/1943360399220388093

[個人的な考え方]
- 「細かく指示しないと進められない新卒エンジニア」くらいの認識だと心が軽くなります。
- 具体的な温度感としては、「動くコードは作れる（基本的に）」「例やサンプルを与えれば改善もできる」「確認作業をサボる」「一気にタスクを渡すとパニック起こす」「都度報告は言わないとやってくれない」「結構前に指示したことは、覚えていたり忘れたりする」
- 「AIコーディングは準備が9割」
- ここに挙げたことを先回りして、あげると良い。下記に一例を挙げる。

### 確認をサボる→確認方法を準備指示
- 「開発できました！」→「動いてないじゃん！」というのが結構ある
- これに対して、こちらから確認方法を準備して指示に含めてあげると良い。
[UI開発の場合]
以下、プロンプトイメージ

```
{ここに開発の指示}

最後にPlayWright MCPでUIを確認して、、要求を満たせているか確認して。
```

参考
https://zenn.dev/sesere/articles/4c0b55102dcc84

Figmaと組み合わせて確認してもらう

```
{ここに開発の指示}


最後にFigma MCPで該当のUIを確認し、PlayWright MCPでUIを確認して、要求を満たせているか確認して。
```

### AIコーディングは準備が9割
- プログラミングをする段階よりも前後が大切
- 良いアウトプットをするために、開発前の準備が大切
- 必要な工程でHuman in the Loop的にレビュー・軌道修正を挟むことが大事
[開発前]
- 開発の指示書・開発方針の言語化
- UIや動作イメージの確認
[開発後]
- コードレビュー
- ドキュメンテーション

[実例をざっくり]
- 前提：Jira MCP・Github MCP・PlayWright MCP・Figma MCPと繋いでおく
- （1）Jira MCPで、URLを貼り付けてGithub Issueに開発仕様書を出力させる
  - 最初からJiraに書いとけば？という意見もあるが、Issueに落とし込むことで、メンバーにレビューしてもらえたり、Claude Code Actionsで実行できたり、「Figma MCPで確認」「PlayWright MCPでUIを確認」等を自動で開発仕様書に入れられるので、こうしている
- （2）Github Issueをレビュー・修正
- （3）GithubIssueのURLをClaudeCodeに投げ込んで、実装してもらう。Figma/PlayWright MCPを必要に応じて実行してもらう
- （4）ClaudeCodeにPRを出してもらい、Claude Codeにレビューしてもらいつつ、自分でレビュー

*それぞれの工程においてClaudeCodeのcommandを用意している

参考：生成AIと「チケット駆動」で作るAPI開発 ~ 俺、プログラミングを辞めるってよ ~
https://zenn.dev/ubie_dev/articles/355baae1826996
